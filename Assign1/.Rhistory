# check dataset.
head(tshirts)
# a.
# construct a contingency table that shows the total quantity sold for each color and size combination.
contingency_table <- table(tshirts$Color, tshirts$Size)
print(contingency_table)
# 获取特定尺寸和颜色的销售数量
size_M_red_sold <- contingency_table["M", "Red"]
# a.
# construct a contingency table that shows the total quantity sold for each color and size combination.
contingency_table <- table(tshirts$Color, tshirts$Size)
print(contingency_table)
# 获取特定尺寸和颜色的销售数量
size_M_red_sold <- contingency_table["Red", "M"]
size_XL_purple_sold <- contingency_table["Purple", "XL"]
cat("Size M红色T恤销售数量:", size_M_red_sold, "\n")
cat("Size XL紫色T恤销售数量:", size_XL_purple_sold, "\n")
# a.
# construct a contingency table that shows the total quantity sold for each color and size combination.
contingency_table <- table(tshirts$Color, tshirts$Size)
print(contingency_table)
# 获取特定尺寸和颜色的销售数量
size_M_red_sold <- contingency_table["Red", "M"]
size_XL_purple_sold <- contingency_table["Purple", "XL"]
cat('\n', "Size M红色T恤销售数量:", size_M_red_sold, "\n")
cat("Size XL紫色T恤销售数量:", size_XL_purple_sold, "\n")
# a.
# construct a contingency table that shows the total quantity sold for each color and size combination.
contingency_table <- table(tshirts$Color, tshirts$Size)
print(contingency_table)
# 获取特定尺寸和颜色的销售数量
Mred_num <- contingency_table["Red", "M"]
XLpurple_num <- contingency_table["Purple", "XL"]
cat('\n', "Number of M red t-shirts were sold:", Mred_num, "\n")
cat("Number of XL purple t-shirts were sold:", XLpurple_num, "\n")
# import ggplot2 package.
library(ggplot2)
# calculate the data for heat map.
heatmap_data <- data.frame(
Color = rep(levels(tshirts$Color), each = length(levels(tshirts$Size))),
Size = rep(levels(tshirts$Size), times = length(levels(tshirts$Color))),
TotalSold = as.vector(contingency_table)
)
install.packages('readxl')
View(tshirts)
tshirts.type()
tshirts.type
View(tshirts)
# 计算每个颜色和尺码组合的销售总量
sales_summary <- aggregate(Quantity ~ Size + Color, data = tshirts, FUN = sum)
# 根据销售总量降序排序
sales_summary <- sales_summary[order(-sales_summary$Quantity), ]
# 构建热图
heat_map <- ggplot(sales_summary, aes(x = Size, y = Color, fill = Quantity)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "T-Shirt Sales Heat Map", x = "Size", y = "Color", fill = "Total Quantity Sold")
print(heat_map)
# 找到销售最多的两种颜色和尺码组合
top_combinations <- head(sales_summary, 2)
cat("The top two color and size combinations are:\n")
print(top_combinations)
# 计算每个颜色和尺码组合的销售总量
sales_summary <- aggregate(Quantity ~ Size + Color, data = tshirts, FUN = sum)
# 根据销售总量降序排序
sales_summary <- sales_summary[order(-sales_summary$Quantity), ]
# 构建热图
heat_map <- ggplot(sales_summary, aes(x = Size, y = Color, fill = Quantity)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "T-Shirt Sales Heat Map", x = "Size", y = "Color", fill = "Total Quantity Sold")
print(heat_map)
# 找到销售最多的两种颜色和尺码组合
top_combinations <- head(sales_summary, 2)
cat("The top two color and size combinations are:\n", sales_summary)
# 计算每个颜色和尺码组合的销售总量
sales_summary <- aggregate(Quantity ~ Size + Color, data = tshirts, FUN = sum)
# 根据销售总量降序排序
sales_summary <- sales_summary[order(-sales_summary$Quantity), ]
# 构建热图
heat_map <- ggplot(sales_summary, aes(x = Size, y = Color, fill = Quantity)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "T-Shirt Sales Heat Map", x = "Size", y = "Color", fill = "Total Quantity Sold")
print(heat_map)
# 找到销售最多的两种颜色和尺码组合
top_combinations <- head(sales_summary, 2)
cat("The top two color and size combinations are:\n", paste(top_combinations$Size, top_combinations$Color, sep = "&"), "\n")
# 计算每个颜色和尺码组合的销售总量
sales_summary <- aggregate(Quantity ~ Size + Color, data = tshirts, FUN = sum)
# 根据销售总量降序排序
sales_summary <- sales_summary[order(-sales_summary$Quantity), ]
# 构建热图
heat_map <- ggplot(sales_summary, aes(x = Size, y = Color, fill = Quantity)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "T-Shirt Sales Heat Map", x = "Size", y = "Color", fill = "Total Quantity Sold")
print(heat_map)
# 找到销售最多的两种颜色和尺码组合
top_combinations <- head(sales_summary, 2)
cat("The top two color and size combinations are:\n", paste(top_combinations$Size, top_combinations$Color, sep = " & "), "\n")
# import ggplot2 package.
library(ggplot2)
# calculate the data for heat map.
# heatmap_data <- data.frame(
#   Color = rep(levels(tshirts$Color), each = length(levels(tshirts$Size))),
#   Size = rep(levels(tshirts$Size), times = length(levels(tshirts$Color))),
#   TotalSold = as.vector(contingency_table)
# )
# tshirts_df <- data.frame(tshirts)
# construct the heat map.
# heat_map <- ggplot(heatmap_data, aes(x = Size, y = Color, fill = TotalSold)) +
#   geom_tile() +
#   scale_fill_gradient(low = "white", high = "blue") +  # 颜色强度从白色到蓝色
#   labs(title = "T-Shirt Sales Heat Map", x = "Size", y = "Color", fill = "Total Quantity Sold")
#
# print(heat_map)
# calculate total amount of each combination of color and size.
sales_summary <- aggregate(Quantity ~ Size + Color, data = tshirts, FUN = sum)[order(-sales_summary$Quantity), ]
# # 根据销售总量降序排序
# sales_summary <- sales_summary[order(-sales_summary$Quantity), ]
# construct the heat map.
heat_map <- ggplot(sales_summary, aes(x = Size, y = Color, fill = Quantity)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "T-Shirt Sales Heat Map", x = "Size", y = "Color", fill = "Total Quantity Sold")
print(heat_map)
# 找到销售最多的两种颜色和尺码组合
top_combinations <- head(sales_summary, 2)
cat("The top two color and size combinations are:\n", paste(top_combinations$Size, top_combinations$Color, sep = " & "), "\n")
# import ggplot2 package.
library(ggplot2)
# calculate total amount of each combination of color and size.
# and sort the total number decending.
sales_summary <- aggregate(Quantity ~ Size + Color, data = tshirts, FUN = sum)[order(-sales_summary$Quantity), ]
# sales_summary <- sales_summary[order(-sales_summary$Quantity), ]
# construct the heat map.
heat_map <- ggplot(sales_summary, aes(x = Size, y = Color, fill = Quantity)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "T-Shirt Sales Heat Map", x = "Size", y = "Color", fill = "Total Quantity Sold")
print(heat_map)
# find top two color and size combinations.
top_combinations <- head(sales_summary, 2)
cat("The top two color and size combinations:\n", paste(top_combinations$Size, top_combinations$Color, sep = "+"), "\n")
# import ggplot2 package.
library(ggplot2)
# calculate total amount of each combination of color and size.
# and sort the total number decending.
sales_total <- aggregate(Quantity ~ Size + Color, data = tshirts, FUN = sum)[order(-sales_total$Quantity), ]
# import ggplot2 package.
library(ggplot2)
# calculate total amount of each combination of color and size.
# and sort the total number decending.
sales_total <- aggregate(Quantity ~ Size + Color, data = tshirts, FUN = sum)
sales_total <- sales_total[order(-sales_total$Quantity), ]
# construct the heat map.
heat_map <- ggplot(sales_summary, aes(x = Size, y = Color, fill = Quantity)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "T-Shirt Sales Heat Map", x = "Size", y = "Color", fill = "Total Quantity Sold")
print(heat_map)
# find top two color and size combinations.
top_combinations <- head(sales_summary, 2)
cat("The top two color and size combinations:\n", paste(top_combinations$Size, top_combinations$Color, sep = "+"), "\n")
# b.
# create RFM score.
# here we use paste0 to combine 3 score together.
credit_cards$RFM_Score <- paste0(
ifelse(credit_cards$DaysSinceLast <= 365, 5, ifelse(credit_cards$DaysSinceLast <= 730, 4, ifelse(credit_cards$DaysSinceLast <= 1095, 3, ifelse(credit_cards$DaysSinceLast <= 1460, 2, 1)))),
ifelse(credit_cards$Frequency >= 100, 5, ifelse(credit_cards$Frequency >= 50, 4, 3)),
ifelse(credit_cards$TotalSpending >= 10000, 5, ifelse(credit_cards$TotalSpending >= 5000, 4, 3))
)
# calculate number of customer who has an RFM score of 55.
rfm_count <- sum(credit_cards$RFM_Score == "555")
cat("Number of customer with RFM score of 555:", rfm_count, "\n")
# calculate the average spending of customer with RFM score of 555.
spend_mean <- mean(credit_cards$TotalSpending[credit_cards$RFM_Score == "555"], na.rm = TRUE)
cat("Average spending of customer with RFM score of 555:", spend_mean, "\n")
# b.
# create RFM score.
# here we use paste0 to combine 3 score together.
credit_cards$RFM_Score <- paste0(
ifelse(credit_cards$DaysSinceLast <= 365, 5, ifelse(credit_cards$DaysSinceLast <= 730, 4, ifelse(credit_cards$DaysSinceLast <= 1095, 3, ifelse(credit_cards$DaysSinceLast <= 1460, 2, 1)))),
ifelse(credit_cards$Frequency >= 100, 5, ifelse(credit_cards$Frequency >= 80, 4, ifelse(credit_cards$DaysSinceLast <= 60, 3, ifelse(credit_cards$DaysSinceLast <= 40, 2, 1)))),
ifelse(credit_cards$TotalSpending >= 10000, 5, ifelse(credit_cards$TotalSpending >= 8000, 4, ifelse(credit_cards$DaysSinceLast <= 6000, 3, ifelse(credit_cards$DaysSinceLast <= 4000, 2, 1))))
)
# calculate number of customer who has an RFM score of 55.
rfm_count <- sum(credit_cards$RFM_Score == "555")
cat("Number of customer with RFM score of 555:", rfm_count, "\n")
# calculate the average spending of customer with RFM score of 555.
spend_mean <- mean(credit_cards$TotalSpending[credit_cards$RFM_Score == "555"], na.rm = TRUE)
cat("Average spending of customer with RFM score of 555:", spend_mean, "\n")
# e.
print(credit_cards)
# e.
print(c(credit_cards$LogSpendingGroup, credit_cards$AverageOrderSizeGroup))
# e.
print(credit_cards$LogSpendingGroup)
print(credit_cards$AverageOrderSizeGroup)
# d.
# create 'AverageOrderSize' to store the average spending per order.
credit_cards$AverageOrderSize <- credit_cards$TotalSpending / credit_cards$Frequency
# create a column to store the group result according to 'AverageOrderSize'.
credit_cards$AverageOrderSizeGroup <- cut(credit_cards$AverageOrderSize, breaks = 5, labels = FALSE)
credit_cards$AverageOrderSizeGroup <- 6 - credit_cards$AverageOrderSizeGroup
# calculate the number of observation of group 2.
group2_num <- sum(credit_cards$AverageOrderSizeGroup == 2)
cat("Number of observation of group 2:", group2_num, "\n")
# e.
print(credit_cards$LogSpendingGroup)
print(credit_cards$AverageOrderSizeGroup)
# b.
# calculate z-scores.
# z_scores <- scale(gas_prices$Price)
price_mean <- mean(gas_prices$Price)
std_dev <- sd(gas_prices$Price)
z_scores <- (gas_prices$Price - price_mean) / std_dev
# use z-score to find outlier.
# 寻找z-分数大于3或小于-3的观测
outliers <- which(z_scores > 3 | z_scores < -3)
cat("通过z-分数法找到的异常值：", length(outliers), "\n")
# print the index of outlier.
cat("Index of outlier：", outliers, "\n")
# b.
# calculate z-scores.
# z_scores <- scale(gas_prices$Price)
price_mean <- mean(gas_prices$Price)
std_dev <- sd(gas_prices$Price)
z_scores <- (gas_prices$Price - price_mean) / std_dev
# use z-score to find outlier.
# 寻找z-分数大于3或小于-3的观测
outliers <- which(z_scores > 2 | z_scores < -2)
cat("通过z-分数法找到的异常值：", length(outliers), "\n")
# print the index of outlier.
cat("Index of outlier：", outliers, "\n")
# b.
# calculate z-scores.
# z_scores <- scale(gas_prices$Price)
price_mean <- mean(gas_prices$Price)
std_dev <- sd(gas_prices$Price)
z_scores <- (gas_prices$Price - price_mean) / std_dev
# use z-score to find outlier.
outliers <- which(z_scores > 2 | z_scores < -2)
cat("Number of outliers：", length(outliers), "\n")
#
# # print the index of outlier.
# cat("Index of outlier：", outliers, "\n")
# mean of the average price of gas without the outliers.
mean_without_outliers <- mean(gas_prices$Price[-outliers])
cat("Average price of gas without the outliers：", mean_without_outliers, "\n")
# mean of the average price of gas without the outliers.
price_mean_without_outliers <- mean(gas_prices$Price[-outliers])
cat("Average price of gas without the outliers：", price_mean_without_outliers, "\n")
# 加载必要的包
library(dplyr)
library(readxl)
# 读取数据文件 Credit_Cards
file_path <- "Assignment-Dataset.xlsx"
data <- excel_sheets(file_path)
credit_cards <- read_excel(file_path, sheet = data[1])
gas_prices <- read_excel(file_path, sheet = data[2])
tshirts <- read_excel(file_path, sheet = data[3])
# check dataset.
head(credit_cards)
# a.
# create 'LastTransactionDate' to store the number of days since the last transaction.
credit_cards$LastTransactionDate <- as.Date(credit_cards$LastTransactionDate, format = "%Y-%m-%d")
credit_cards$DaysSinceLast <- as.numeric(difftime(as.Date("2022-01-01"), credit_cards$LastTransactionDate, units = "days"))
credit_cards
# calculate the average number of days since the last purchase for all the customers.
day_mean <- mean(credit_cards$DaysSinceLast, na.rm = TRUE)
cat("The average number of days since the last purchase:", day_mean, "\n")
# b.
# create RFM score.
# here we use paste0 to combine 3 score together.
credit_cards$RFM_Score <- paste0(
ifelse(credit_cards$DaysSinceLast <= 365, 5, ifelse(credit_cards$DaysSinceLast <= 730, 4, ifelse(credit_cards$DaysSinceLast <= 1095, 3, ifelse(credit_cards$DaysSinceLast <= 1460, 2, 1)))),
ifelse(credit_cards$Frequency >= 100, 5, ifelse(credit_cards$Frequency >= 80, 4, ifelse(credit_cards$Frequency <= 60, 3, ifelse(credit_cards$Frequency <= 40, 2, 1)))),
ifelse(credit_cards$TotalSpending >= 10000, 5, ifelse(credit_cards$TotalSpending >= 8000, 4, ifelse(credit_cards$TotalSpending <= 6000, 3, ifelse(credit_cards$TotalSpending <= 4000, 2, 1))))
)
# calculate number of customer who has an RFM score of 55.
rfm_count <- sum(credit_cards$RFM_Score == "555")
cat("Number of customer with RFM score of 555:", rfm_count, "\n")
# calculate the average spending of customer with RFM score of 555.
spend_mean <- mean(credit_cards$TotalSpending[credit_cards$RFM_Score == "555"], na.rm = TRUE)
cat("Average spending of customer with RFM score of 555:", spend_mean, "\n")
# b.
# create RFM score.
# here we use paste0 to combine 3 score together.
credit_cards$RFM_Score <- paste0(
ifelse(credit_cards$DaysSinceLast <= 200, 5, ifelse(credit_cards$DaysSinceLast <= 300, 4, ifelse(credit_cards$DaysSinceLast <= 400, 3, ifelse(credit_cards$DaysSinceLast <= 500, 2, 1)))),
ifelse(credit_cards$Frequency >= 100, 5, ifelse(credit_cards$Frequency >= 80, 4, ifelse(credit_cards$Frequency <= 60, 3, ifelse(credit_cards$Frequency <= 40, 2, 1)))),
ifelse(credit_cards$TotalSpending >= 10000, 5, ifelse(credit_cards$TotalSpending >= 8000, 4, ifelse(credit_cards$TotalSpending <= 6000, 3, ifelse(credit_cards$TotalSpending <= 4000, 2, 1))))
)
# calculate number of customer who has an RFM score of 55.
rfm_count <- sum(credit_cards$RFM_Score == "555")
cat("Number of customer with RFM score of 555:", rfm_count, "\n")
# calculate the average spending of customer with RFM score of 555.
spend_mean <- mean(credit_cards$TotalSpending[credit_cards$RFM_Score == "555"], na.rm = TRUE)
cat("Average spending of customer with RFM score of 555:", spend_mean, "\n")
# c.
# calculate value of 'LogSpending' column.
credit_cards$LogSpending <- log(credit_cards$TotalSpending)
# create a column to store the group of LogSpending for each customer.
credit_cards$LogSpendingGroup <- cut(credit_cards$LogSpending, breaks = 5, labels = FALSE)
head(credit_cards)
# calculate the number of observations in group 2.
group2_num <- sum(credit_cards$LogSpendingGroup == 2)
cat("Number of observations in group 2:", group2_num, "\n")
# d.
# create 'AverageOrderSize' to store the average spending per order.
credit_cards$AverageOrderSize <- credit_cards$TotalSpending / credit_cards$Frequency
# create a column to store the group result according to 'AverageOrderSize'.
credit_cards$AverageOrderSizeGroup <- cut(credit_cards$AverageOrderSize, breaks = 5, labels = FALSE)
#credit_cards$AverageOrderSizeGroup <- 6 - credit_cards$AverageOrderSizeGroup
# calculate the number of observation of group 2.
group2_num <- sum(credit_cards$AverageOrderSizeGroup == 2)
cat("Number of observation of group 2:", group2_num, "\n")
# b.
# calculate z-scores.
# z_scores <- scale(gas_prices$Price)
price_mean <- mean(gas_prices$Price)
std_dev <- sd(gas_prices$Price)
z_scores <- (gas_prices$Price - price_mean) / std_dev
# use z-score to find outlier.
outliers <- which(z_scores > 3 | z_scores < -3)
cat("Number of outliers：", length(outliers), "\n")
#
# # print the index of outlier.
# cat("Index of outlier：", outliers, "\n")
# mean of the average price of gas without the outliers.
price_mean_without_outliers <- mean(gas_prices$Price[-outliers])
cat("Average price of gas without the outliers：", price_mean_without_outliers, "\n")
# mean of the average price of gas without the outliers.
#price_mean_without_outliers <- mean(gas_prices$Price[-outliers])
outlier <- boxplot.stats(gas_prices$Price)$out
price_mean <- gas_prices %>% filter(Price != outlier)
cat("Average price of gas without the outliers：", price_mean_without_outliers, "\n")
# mean of the average price of gas without the outliers.
#price_mean_without_outliers <- mean(gas_prices$Price[-outliers])
outlier <- boxplot.stats(gas_prices$Price)$out
price_mean <- mean(gas_prices %>% filter(Price != outlier))
cat("Average price of gas without the outliers：", price_mean, "\n")
# mean of the average price of gas without the outliers.
#price_mean_without_outliers <- mean(gas_prices$Price[-outliers])
library(tidyverse)
install.packages('tidyverse')
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
# import ggplot2 package.
library(ggplot2)
# calculate total amount of each combination of color and size.
# and sort the total number decending.
#sales_total <- aggregate(Quantity ~ Size + Color, data = tshirts, FUN = sum)
#sales_total <- sales_total[order(-sales_total$Quantity), ]
sales_summary_df <- as.data.frame(as.table(contingency_table))
# construct the heat map.
heat_map <- ggplot(sales_summary_df, aes(x = Size, y = Color, fill = Quantity)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "T-Shirt Sales Heat Map", x = "Size", y = "Color", fill = "Total Quantity Sold")
print(heat_map)
# import ggplot2 package.
library(ggplot2)
# calculate total amount of each combination of color and size.
# and sort the total number decending.
#sales_total <- aggregate(Quantity ~ Size + Color, data = tshirts, FUN = sum)
#sales_total <- sales_total[order(-sales_total$Quantity), ]
sales_summary_df <- as.data.frame(as.table(contingency_table))
# construct the heat map.
ggplot(sales_summary_df, aes(x = Size, y = Color, fill = Quantity)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "T-Shirt Sales Heat Map", x = "Size", y = "Color", fill = "Total Quantity Sold")
# import ggplot2 package.
library(ggplot2)
# calculate total amount of each combination of color and size.
# and sort the total number decending.
#sales_total <- aggregate(Quantity ~ Size + Color, data = tshirts, FUN = sum)
#sales_total <- sales_total[order(-sales_total$Quantity), ]
sales_summary_df <- as.data.frame(as.table(contingency_table))
# construct the heat map.
heat_map <- ggplot(sales_summary_df, aes(x = Size, y = Color, fill = Freq)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "T-Shirt Sales Heat Map", x = "Size", y = "Color", fill = "Total Quantity Sold")
print(heat_map)
sales_summary_df
# import ggplot2 package.
library(ggplot2)
# calculate total amount of each combination of color and size.
# and sort the total number decending.
#sales_total <- aggregate(Quantity ~ Size + Color, data = tshirts, FUN = sum)
#sales_total <- sales_total[order(-sales_total$Quantity), ]
sales_summary_df <- as.data.frame(as.table(contingency_table))
# construct the heat map.
heat_map <- ggplot(sales_summary_df, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "T-Shirt Sales Heat Map", x = "Size", y = "Color", fill = "Total Quantity Sold")
print(heat_map)
# find top two color and size combinations.
top_combinations <- head(sales_summary, 2)
cat("The top two color and size combinations:\n", paste(top_combinations$Size, top_combinations$Color, sep = "+"), "\n")
# import ggplot2 package.
library(ggplot2)
# calculate total amount of each combination of color and size.
# and sort the total number decending.
#sales_total <- aggregate(Quantity ~ Size + Color, data = tshirts, FUN = sum)
#sales_total <- sales_total[order(-sales_total$Quantity), ]
sales_summary_df <- as.data.frame(as.table(contingency_table))
# construct the heat map.
heat_map <- ggplot(sales_summary_df, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "T-Shirt Sales Heat Map", x = "Size", y = "Color", fill = "Total Quantity Sold")
print(heat_map)
# find top two color and size combinations.
#top_combinations <- head(sales_summary, 2)
#cat("The top two color and size combinations:\n", paste(top_combinations$Size, #top_combinations$Color, sep = "+"), "\n")
# mean of the average price of gas without the outliers.
#price_mean_without_outliers <- mean(gas_prices$Price[-outliers])
library(tidyverse)
install.packages('tidyverse')
install.packages("tidyverse")
# mean of the average price of gas without the outliers.
#price_mean_without_outliers <- mean(gas_prices$Price[-outliers])
library(tidyverse)
outlier <- boxplot.stats(gas_prices$Price)$out
price_mean <- mean(gas_prices %>% filter(Price != outlier))
# mean of the average price of gas without the outliers.
#price_mean_without_outliers <- mean(gas_prices$Price[-outliers])
library(tidyverse)
outlier <- boxplot.stats(gas_prices$Price)$out
price_mean <- gas_prices %>% filter(Price != outlier)
?filter
# mean of the average price of gas without the outliers.
#price_mean_without_outliers <- mean(gas_prices$Price[-outliers])
library(tidyverse)
outlier <- boxplot.stats(gas_prices$Price)$out
price_mean <- gas_prices
price_mean <- filter(gas_prices, by = Price != outlier)
# mean of the average price of gas without the outliers.
#price_mean_without_outliers <- mean(gas_prices$Price[-outliers])
library(tidyverse)
outlier <- boxplot.stats(gas_prices$Price)$out
#price_mean <- gas_prices
price_mean <- filter(gas_prices, Price != outlier)
# mean of the average price of gas without the outliers.
#price_mean_without_outliers <- mean(gas_prices$Price[-outliers])
library(tidyverse)
outlier <- boxplot.stats(gas_prices$Price)$out
#price_mean <- gas_prices
price_mean <- filter(gas_prices, gas_prices$Price != outlier)
price_mean <- mean (price_mean)
cat("Average price of gas without the outliers：", price_mean, "\n")
outlier
# mean of the average price of gas without the outliers.
#price_mean_without_outliers <- mean(gas_prices$Price[-outliers])
library(tidyverse)
outlier <- boxplot.stats(gas_prices$Price)$out
#price_mean <- gas_prices
price_mean <- filter(gas_prices$Price, gas_prices$Price != outlier)
price_mean <- mean (price_mean)
cat("Average price of gas without the outliers：", price_mean, "\n")
price_mean_without_outliers <- mean(gas_prices$Price[-outliers], )
price_mean_without_outliers
# mean of the average price of gas without the outliers.
#price_mean_without_outliers <- mean(gas_prices$Price[-outliers], )
library(tidyverse)
outlier <- boxplot.stats(gas_prices$Price)$out
#price_mean <- filter(gas_prices$Price, gas_prices$Price != outlier)
price_mean <- mean (gas_prices[gas_prices$Price != 3.37, ])
cat("Average price of gas without the outliers：", price_mean, "\n")
# check dataset.
head(gas_prices)
# mean of the average price of gas without the outliers.
#price_mean_without_outliers <- mean(gas_prices$Price[-outliers], )
library(tidyverse)
outlier <- boxplot.stats(gas_prices$Price)$out
#price_mean <- filter(gas_prices$Price, gas_prices$Price != outlier)
price_mean <- mean (gas_prices[gas_prices$Price != outlier, ])
cat("Average price of gas without the outliers：", price_mean, "\n")
gas_prices[gas_prices$Price != outlier, ]
# mean of the average price of gas without the outliers.
#price_mean_without_outliers <- mean(gas_prices$Price[-outliers], )
library(tidyverse)
outlier <- boxplot.stats(gas_prices$Price)$out
#price_mean <- filter(gas_prices$Price, gas_prices$Price != outlier)
price_mean <- mean(gas_prices[gas_prices$Price != outlier, ])
cat("Average price of gas without the outliers：", price_mean, "\n")
# mean of the average price of gas without the outliers.
#price_mean_without_outliers <- mean(gas_prices$Price[-outliers], )
library(tidyverse)
outlier <- boxplot.stats(gas_prices$Price)$out
#price_mean <- filter(gas_prices$Price, gas_prices$Price != outlier)
price_mean <- gas_prices[gas_prices$Price != outlier, ]
price_mean <- mean(price_mean)
cat("Average price of gas without the outliers：", price_mean, "\n")
price_mean <- gas_prices[gas_prices$Price != outlier, ]
price_mean
# mean of the average price of gas without the outliers.
#price_mean_without_outliers <- mean(gas_prices$Price[-outliers], )
library(tidyverse)
outlier <- boxplot.stats(gas_prices$Price)$out
#price_mean <- filter(gas_prices$Price, gas_prices$Price != outlier)
price_mean <- gas_prices[gas_prices$Price != outlier, ]
price_mean <- mean(price_mean$Price)
cat("Average price of gas without the outliers：", price_mean, "\n")
